#!/bin/sh
CLIARGS="$*"		# Grab any args passed to safe_openpbx
TTY=9			# TTY (if you want one) for OpenPBX to run on
CONSOLE=yes		# Whether or not you want a console
#NOTIFY=ben@alkaloid.net	# Who to notify about crashes
MACHINE=`hostname`      # To specify which machine has crashed when getting the mail
DUMPDROP=/tmp
ASTSBINDIR=__OPENPBX_SBIN_DIR__
#
# Don't fork when running "safely"
#
ASTARGS=""
if [ "$TTY" != "" ]; then
	if [ -c /dev/tty${TTY} ]; then
		TTY=tty${TTY}
	elif [ -c /dev/vc/${TTY} ]; then
		TTY=vc/${TTY}
	else
		echo "Cannot find your TTY (${TTY})" >&2
		exit 1
	fi
	ASTARGS="${ASTARGS} -vvvg"
	if [ "$CONSOLE" != "no" ]; then
		ASTARGS="${ASTARGS} -c"
	fi
fi
if [ ! -w ${DUMPDROP} ]; then	
	echo "Cannot write to ${DUMPDROP}" >&2
	exit 1
fi

#
# Let OpenPBX dump core
#
ulimit -c unlimited

#launch_openpbx()
#{
#}

run_openpbx()
{
	while :; do 

		if [ "$TTY" != "" ]; then
			cd /tmp
			stty sane < /dev/${TTY}
			${ASTSBINDIR}/openpbx ${CLIARGS} ${ASTARGS} >& /dev/${TTY} < /dev/${TTY}
		else
			cd /tmp
			${ASTSBINDIR}/openpbx ${CLIARGS} ${ASTARGS}
		fi
		EXITSTATUS=$?
		echo "OpenPBX ended with exit status $EXITSTATUS"
		if [ "$EXITSTATUS" = "0" ]; then
			# Properly shutdown....
			echo "OpenPBX shutdown normally."
			exit 0
		elif [ $EXITSTATUS -gt 128 ]; then
			let EXITSIGNAL=EXITSTATUS-128
			echo "OpenPBX exited on signal $EXITSIGNAL."
			if [ "$NOTIFY" != "" ]; then
				echo "OpenPBX on $MACHINE exited on signal $EXITSIGNAL.  Might want to take a peek." | \
				mail -s "OpenPBX Died" $NOTIFY
			fi
                        if [ -f /tmp/core ]; then
				mv /tmp/core ${DUMPDROP}/core.`hostname`-`date -Iseconds` &
			fi
		else
			if [ "${EXITSTATUS}" = "0" ]; then
				echo "OpenPBX ended normally.  Aborting."
				exit 0
			else
				echo "OpenPBX died with code $EXITSTATUS."
	                        if [ -f /tmp/core ]; then
					mv /tmp/core ${DUMPDROP}/core.`hostname`-`date -Iseconds` &
				fi
			fi
		fi
		echo "Automatically restarting OpenPBX."
		sleep 4
	done
}

run_openpbx &
