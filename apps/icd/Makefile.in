CC=gcc 
OBJS = app_icd.o icd_agent.o icd_bridge.o icd_caller.o icd_caller_list.o icd_command.o \
	icd_conference.o icd_config.o icd_customer.o icd_distributor.o icd_distributor_list.o \
	icd_event.o icd_fieldset.o icd_list.o icd_listeners.o icd_member.o icd_member_list.o \
	icd_metalist.o icd_queue.o voidhash.o \
    icd_module_api.o icd_plugable_fn.o icd_plugable_fn_list.o icd_jabber.o

FORDIST = icd_caller.o icd_distributor.o

# this is the path to apr-config a MUST HAVE for APR 
APR_CONFIG=/usr/local/apr/bin/apr-config

# Uncomment YES or NO for apr support or just touch .apr file in the icd src dir.
#USE_APR=YES
#USE_APR=NO
USE_APR=$(shell if [ -f .apr ] ; then echo YES ; else echo NO ; fi )
# Uncomment to print every malloc/dealloc when apr mode is active
#CFLAGS += -DICD_APR_DEBUG



CFLAGS += $(shell if [ -f $(APR_CONFIG) ] && [ $(USE_APR) = "YES" ] ; then $(APR_CONFIG) --cflags --includes ; fi )
CFLAGS += $(shell if [ -f $(APR_CONFIG) ] && [ $(USE_APR) = "YES" ] ; then echo -DUSE_APR ; fi )
LDFLAGS += $(shell if [ -f $(APR_CONFIG) ] && [ $(USE_APR) = "YES" ] ; then $(APR_CONFIG) --link-ld --libs ; fi )
OBJS += $(shell if [ -f $(APR_CONFIG) ] && [ $(USE_APR) = "YES" ] ; then echo icd_apr.o ; fi )
# where is the asterisk source tree
ASTSRC = @TOPDIR@

INCLUDES =  -I$(ASTSRC) -I$(ASTSRC)/include -I.
CFLAGS +=  $(INCLUDES)
CFLAGS +=  -DINSTALL_PREFIX=\"$(INSTALL_PREFIX)\" -DASTETCDIR=\"$(ASTETCDIR)\" -DASTLIBDIR=\"$(ASTLIBDIR)\"
CFLAGS +=  -DASTVARLIBDIR=\"$(ASTVARLIBDIR)\" -DASTVARRUNDIR=\"$(ASTVARRUNDIR)\" -DASTSPOOLDIR=\"$(ASTSPOOLDIR)\" -DASTLOGDIR=\"$(ASTLOGDIR)\"
CFLAGS +=  -DASTCONFPATH=\"$(ASTCONFPATH)\" -DASTMODDIR=\"$(MODULES_DIR)\" -DASTAGIDIR=\"$(AGI_DIR)\" -D_GNU_SOURCE 
CFLAGS += -O0 -ggdb
CFLAGS += -Wall
#CFLAGS += -DNDEBUG

DYNA=$(shell echo icd_mod_*.c | sed "s/\.c/\.so/g" )

all:  app_icd.so


%.o:  %.c
	@echo -n " ===> Compile:" `pwd` ; echo "/$< ($@)"
	@$(CC) -fPIC $(CFLAGS) `pkg-config --cflags loudmouth-1.0` -c -o $@ $< 


app_icd.so: $(OBJS)
	@echo    " ===> Linking: >> $(OBJS) <<  ($@)"
	@$(CC) -fPIC -Xlinker -x -o $@ $(OBJS) `pkg-config --cflags --libs loudmouth-1.0` -lpthread $(LDFLAGS)


config_if_none:
	@if [ ! -d $(ASTETCDIR)/icd_config ]  ; then  echo INSTALLING NEW CONFIGS ;\
	mkdir $(ASTETCDIR)/icd_config ;\
	/bin/cp -dp icd_config/*.conf $(ASTETCDIR)/icd_config ;\
	echo CONFIGS INSTALLED ;\
	fi


config_overwrite:
	@echo 'INSTALLING CONFIGS (OVERWRITE)'
	@if [ ! -d $(ASTETCDIR)/icd_config ]  ; then  mkdir $(ASTETCDIR)/icd_config ; fi
	@/bin/cp -dp icd_config/*.conf $(ASTETCDIR)/icd_config ;\
	echo CONFIGS OVERWRITTEN

overwrite: clean all install config_overwrite

fresh: clean all install

$(MODULES_DIR)/app_icd.so: app_icd.so
	@/bin/cp -pf app_icd.so $(MODULES_DIR)

modules: $(MODULES_DIR)/app_icd.so  $(DYNA)
	@/bin/mkdir -p /usr/lib/icd
	@/bin/cp icd_mod_*.so /usr/lib/icd
	@echo OK MODULE INSTALL COMPLETE

install: all modules config_if_none
	@echo INSTALLING 
	@/bin/rm -f $(MODULES_DIR)/app_icd.so
	@/bin/cp -p app_icd.so $(MODULES_DIR)
	@/bin/mkdir -p /usr/lib/icd
	@/bin/cp icd_mod_*.so /usr/lib/icd
	@echo OK INSTALL COMPLETE

clean:
	rm -f *.o *.so *~

distclean: clean
	rm -f *.cache 

%.so: %.c 
	@echo -n " ===> Compile External Module:" `pwd` ; echo "/$< ($@)"
	@$(CC) -fPIC $(CFLAGS)  `pkg-config --cflags loudmouth-1.0`  -c  $<
	@$(CC) -fPIC -Xlinker  -x -o $@ $(shell echo $@ | sed "s/\.so/\.o/g" ) /usr/lib/asterisk/modules/app_icd.so  $(LDFLAGS)

